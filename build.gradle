/*
 * Copyright 2017 Sophos Limited. All rights reserved.
 *
 * 'Sophos' and 'Sophos Anti-Virus' are registered trademarks of Sophos Limited and Sophos Group. All other product
 * and company names mentioned are trademarks or registered trademarks of their respective owners.
 */

buildscript {
    repositories {
        maven {
            name = "development"
            url = "${artifactoryContextUrl}/develop/"
            
        }
        maven {
            name = "snapshots"
            url = "${artifactoryContextUrl}/snapshots/"
            
        }
        maven {
            name = "releases"
            url = "${artifactoryContextUrl}/releases/"
            
        }
        maven {
            url = "${artifactoryContextUrl}/maven"
        }
    }
    apply from: "$rootProject.projectDir/config/buildscript.gradle", to: buildscript
    ext {
        BASE_IMAGE = (findProperty("CHASSIS_BASE_IMAGE") != null) ? getProperty("CHASSIS_BASE_IMAGE") :
                "chassis-default-al2-17:latest"
        // substitute your group name for 'platform'
        GROUP_NAME = "platform"
        GROUP_NAME = BASE_IMAGE.contains("-fr") ? GROUP_NAME + "-fr": GROUP_NAME
      
        // EXECUTE_SEALIGHTS is used for sealights integration. In order to integrate sealights with CI, if the property
        // ENABLE_SEALIGHTS_IN_CI is set from CI, then reads its value else disables sealights integration
        EXECUTE_SEALIGHTS = (findProperty("ENABLE_SEALIGHTS_IN_CI") != null) ? getProperty("ENABLE_SEALIGHTS_IN_CI") :
                "false"
        // In CD, it overrides EXECUTE_SEALIGHTS value only if SEALIGHTS_ENABLED checkbox is selected / unselected.
        if (System.getenv('SEALIGHTS_ENABLED') != null)
        {
            EXECUTE_SEALIGHTS = System.getenv('SEALIGHTS_ENABLED')
        }
    }
}

plugins {
    id 'org.springframework.boot' version '2.7.17'
    id 'com.github.spotbugs' version '4.7.3'
    id 'com.github.ksoichiro.console.reporter' version '0.6.3'
    // Sophos Sealights plugin is set to false till a check for EXECUTE_SEALIGHTS value is done
    // (later in this file) and at that point it gets applied if the value is true.
    id 'com.sophos.central.sophosSealights' version '0.8.0' apply false
    id 'com.sophos.central.sonar' version '0.0.1.RELEASE'
}

repositories {
  maven {
    name = "development"
    url = "${artifactoryContextUrl}/develop/"
    
  }
  maven {
    name = "snapshots"
    url = "${artifactoryContextUrl}/snapshots/"
    
  }
  maven {
    name = "releases"
    url = "${artifactoryContextUrl}/releases/"
    
  }
}

apply plugin: 'checkstyle'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'com.github.spotbugs'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'io.franzbecker.gradle-lombok'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.sophos.central.chassis'
apply plugin: 'se.patrikerdes.use-latest-versions'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

//inputs to the chassis-gradle-plugin, https://git.cloud.sophos/projects/PLATFORM/repos/chassis-gradle-plugin/browse
chassis {
    group = GROUP_NAME
    // substitute your service name for 'sample-ms'
    serviceName = "sample-ms"
    // dockerRegistryUrl = System.getenv('ART_REPO')
    dockerRegistryUrl = 'artifactory.sophos-tools.com/docker-read'
    baseImage = "platform/" + BASE_IMAGE //use al2-based image for production
    // OPTIONAL: baseLocalImage to be used when run in local environment (Intel/M1 mac).
    // If this param is empty or not used, baseImage param value will be used.
    baseLocalImage = "platform/" + BASE_IMAGE
    alwaysPullBaseImages = true
}

if ("${EXECUTE_SEALIGHTS}" == "true") {
    apply plugin : 'com.sophos.central.sophosSealights'
    def slLogLevelValue = System.getenv('SL_LOG_LEVEL') ? System.getenv('SL_LOG_LEVEL').toLowerCase() : "off"
    sophosSealights {
        slLogLevel = slLogLevelValue
        slLogEnabled = slLogLevelValue != "off"
        slPackagesExcluded = "*com.sophos.central.api.*"
    }
    apply from: 'config/sealights.gradle'
}

apply from: 'config/sourceSets.gradle'
apply from: 'config/testTasks.gradle'
apply from: 'config/publish.gradle'
apply from: 'config/gatling.gradle'
apply from: 'config/swagger.gradle'
// Veracode Scan
apply from: 'config/syncGradleTaskFiles.gradle'

boolean isJenkinsBuild = System.getenv('JOB_NAME') != null ?: false

if (!isJenkinsBuild) {
  apply from: 'config/localMonitoring.gradle'
}

if (project.hasProperty("MONITORING_CI")) {
    println "MONITORING_CI is on"
    chassisDockerCompose {
        useComposeFiles = ['monitoring/docker-compose-monitoring-test.yml']
    }
}

dependencyUpdates {
  checkForGradleUpdate = true
  resolutionStrategy {
    componentSelection { rules ->
      rules.all { ComponentSelection selection ->
        boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
          selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
        }
        if (rejected) {
          selection.reject('Release candidate')
        }
      }
    }
  }
}

checkstyle {
    configProperties = [
        "suppressionFile" : project(':').file("config/checkstyle/suppressions.xml"),
        "headerFile" : project(':').file("config/central.header")
    ]
}
